// Code generated by protoc-gen-go.
// source: graphproto.proto
// DO NOT EDIT!

/*
Package graphproto is a generated protocol buffer package.

It is generated from these files:
	graphproto.proto

It has these top-level messages:
	NewGraphRequest
	NewGraphResponse
*/
package graphproto

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "code.google.com/p/protorpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type NewGraphRequest struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NewGraphRequest) Reset()         { *m = NewGraphRequest{} }
func (m *NewGraphRequest) String() string { return proto.CompactTextString(m) }
func (*NewGraphRequest) ProtoMessage()    {}

func (m *NewGraphRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type NewGraphResponse struct {
	Res              *int32 `protobuf:"varint,1,req,name=res" json:"res,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NewGraphResponse) Reset()         { *m = NewGraphResponse{} }
func (m *NewGraphResponse) String() string { return proto.CompactTextString(m) }
func (*NewGraphResponse) ProtoMessage()    {}

func (m *NewGraphResponse) GetRes() int32 {
	if m != nil && m.Res != nil {
		return *m.Res
	}
	return 0
}

func init() {
}

type GraphService interface {
	Newgraph(in *NewGraphRequest, out *NewGraphResponse) error
}

// AcceptGraphServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptGraphServiceClient(lis net.Listener, x GraphService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("GraphService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterGraphService publish the given GraphService implementation on the server.
func RegisterGraphService(srv *rpc.Server, x GraphService) error {
	if err := srv.RegisterName("GraphService", x); err != nil {
		return err
	}
	return nil
}

// NewGraphServiceServer returns a new GraphService Server.
func NewGraphServiceServer(x GraphService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("GraphService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeGraphService listen announces on the local network address laddr
// and serves the given GraphService implementation.
func ListenAndServeGraphService(network, addr string, x GraphService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("GraphService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type GraphServiceClient struct {
	*rpc.Client
}

// NewGraphServiceClient returns a GraphService rpc.Client and stub to handle
// requests to the set of GraphService at the other end of the connection.
func NewGraphServiceClient(conn io.ReadWriteCloser) (*GraphServiceClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &GraphServiceClient{c}, c
}

func (c *GraphServiceClient) Newgraph(in *NewGraphRequest, out *NewGraphResponse) error {
	return c.Call("GraphService.Newgraph", in, out)
}

// DialGraphService connects to an GraphService at the specified network address.
func DialGraphService(network, addr string) (*GraphServiceClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &GraphServiceClient{c}, c, nil
}

// DialGraphServiceTimeout connects to an GraphService at the specified network address.
func DialGraphServiceTimeout(network, addr string,
	timeout time.Duration) (*GraphServiceClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &GraphServiceClient{c}, c, nil
}
