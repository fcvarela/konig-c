// Code generated by protoc-gen-go.
// source: graphproto.proto
// DO NOT EDIT!

/*
Package graphproto is a generated protocol buffer package.

It is generated from these files:
	graphproto.proto

It has these top-level messages:
	GraphResponse
	GraphRequest
*/
package graphproto

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "code.google.com/p/protorpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// we use the same response object for everything
type GraphResponse struct {
	ObjId            *uint64 `protobuf:"varint,1,opt,name=obj_id" json:"obj_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GraphResponse) Reset()         { *m = GraphResponse{} }
func (m *GraphResponse) String() string { return proto.CompactTextString(m) }
func (*GraphResponse) ProtoMessage()    {}

func (m *GraphResponse) GetObjId() uint64 {
	if m != nil && m.ObjId != nil {
		return *m.ObjId
	}
	return 0
}

type GraphRequest struct {
	ObjId1           *uint64 `protobuf:"varint,1,opt,name=obj_id1" json:"obj_id1,omitempty"`
	ObjId2           *uint64 `protobuf:"varint,2,opt,name=obj_id2" json:"obj_id2,omitempty"`
	ObjId3           *uint64 `protobuf:"varint,3,opt,name=obj_id3" json:"obj_id3,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GraphRequest) Reset()         { *m = GraphRequest{} }
func (m *GraphRequest) String() string { return proto.CompactTextString(m) }
func (*GraphRequest) ProtoMessage()    {}

func (m *GraphRequest) GetObjId1() uint64 {
	if m != nil && m.ObjId1 != nil {
		return *m.ObjId1
	}
	return 0
}

func (m *GraphRequest) GetObjId2() uint64 {
	if m != nil && m.ObjId2 != nil {
		return *m.ObjId2
	}
	return 0
}

func (m *GraphRequest) GetObjId3() uint64 {
	if m != nil && m.ObjId3 != nil {
		return *m.ObjId3
	}
	return 0
}

func init() {
}

type GraphService interface {
	AddGraph(in *GraphRequest, out *GraphResponse) error
	AddVertex(in *GraphRequest, out *GraphResponse) error
	AddEdge(in *GraphRequest, out *GraphResponse) error
	DeleteGraph(in *GraphRequest, out *GraphResponse) error
	DeleteVertex(in *GraphRequest, out *GraphResponse) error
	DeleteEdge(in *GraphRequest, out *GraphResponse) error
}

// AcceptGraphServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptGraphServiceClient(lis net.Listener, x GraphService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("GraphService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterGraphService publish the given GraphService implementation on the server.
func RegisterGraphService(srv *rpc.Server, x GraphService) error {
	if err := srv.RegisterName("GraphService", x); err != nil {
		return err
	}
	return nil
}

// NewGraphServiceServer returns a new GraphService Server.
func NewGraphServiceServer(x GraphService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("GraphService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeGraphService listen announces on the local network address laddr
// and serves the given GraphService implementation.
func ListenAndServeGraphService(network, addr string, x GraphService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("GraphService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type GraphServiceClient struct {
	*rpc.Client
}

// NewGraphServiceClient returns a GraphService rpc.Client and stub to handle
// requests to the set of GraphService at the other end of the connection.
func NewGraphServiceClient(conn io.ReadWriteCloser) (*GraphServiceClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &GraphServiceClient{c}, c
}

func (c *GraphServiceClient) AddGraph(in *GraphRequest, out *GraphResponse) error {
	return c.Call("GraphService.AddGraph", in, out)
}
func (c *GraphServiceClient) AddVertex(in *GraphRequest, out *GraphResponse) error {
	return c.Call("GraphService.AddVertex", in, out)
}
func (c *GraphServiceClient) AddEdge(in *GraphRequest, out *GraphResponse) error {
	return c.Call("GraphService.AddEdge", in, out)
}
func (c *GraphServiceClient) DeleteGraph(in *GraphRequest, out *GraphResponse) error {
	return c.Call("GraphService.DeleteGraph", in, out)
}
func (c *GraphServiceClient) DeleteVertex(in *GraphRequest, out *GraphResponse) error {
	return c.Call("GraphService.DeleteVertex", in, out)
}
func (c *GraphServiceClient) DeleteEdge(in *GraphRequest, out *GraphResponse) error {
	return c.Call("GraphService.DeleteEdge", in, out)
}

// DialGraphService connects to an GraphService at the specified network address.
func DialGraphService(network, addr string) (*GraphServiceClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &GraphServiceClient{c}, c, nil
}

// DialGraphServiceTimeout connects to an GraphService at the specified network address.
func DialGraphServiceTimeout(network, addr string,
	timeout time.Duration) (*GraphServiceClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &GraphServiceClient{c}, c, nil
}
